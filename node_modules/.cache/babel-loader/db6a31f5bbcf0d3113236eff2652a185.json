{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n\nfunction SpotifyData() {\n  _s();\n\n  let [token, setToken] = useState(false);\n  let [currentSong, setCurrentSong] = useState();\n  let [currentUser, setCurrentUser] = useState();\n  let [availableSeeds, setAvailableSeeds] = useState([]);\n\n  function getCurrentSong() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      if (response.item) {\n        setCurrentSong(response.item.name);\n      } else {\n        setCurrentSong(false);\n      }\n    });\n  }\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getAvailableGenreSeeds() {\n    spotifyWebApi.getAvailableGenreSeeds().then(response => {\n      console.log(response.genres);\n\n      if (response) {\n        setAvailableSeeds(response.genres);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getAvailableGenreSeeds().then(response => {\n      console.log(response.genres);\n\n      if (response) {\n        setAvailableSeeds(response.genres);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      console.log(response); // if (response) {\n      //     setAvailableSeeds(response.genres)\n      // } \n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  useEffect(() => {\n    if (token) {\n      getMe();\n      return; //getCategory(\"acoustic\"\n    }\n  }, [token]);\n  let genreList = availableSeeds.map(genre => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 24\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", currentUser, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }, this), currentSong && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Playing: \", currentSong]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }, this), token && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getAvailableGenreSeeds,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 23\n    }, this), genreList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyData, \"nLXCTaJ5y7kaZsjwco5GIJ2C9Bc=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","spotifyWebApi","SpotifyData","token","setToken","currentSong","setCurrentSong","currentUser","setCurrentUser","availableSeeds","setAvailableSeeds","getCurrentSong","getMyCurrentPlaybackState","then","response","item","name","getMe","display_name","getAvailableGenreSeeds","console","log","genres","getCategories","getCategory","id","saveToken","setAccessToken","genreList","map","genre"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\nfunction SpotifyData() {\n    let [token, setToken] = useState(false) \n    let [currentSong, setCurrentSong] = useState()\n    let [currentUser, setCurrentUser] = useState()\n    let [availableSeeds, setAvailableSeeds] = useState([])\n\n    function getCurrentSong() {\n        spotifyWebApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                if (response.item) {\n                    setCurrentSong(response.item.name)\n                } else { setCurrentSong(false) }\n        });\n    }\n\n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getAvailableGenreSeeds() {\n        spotifyWebApi.getAvailableGenreSeeds()\n            .then((response) => {\n                console.log(response.genres)\n                if (response) {\n                    setAvailableSeeds(response.genres)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getAvailableGenreSeeds()\n            .then((response) => {\n                console.log(response.genres)\n                if (response) {\n                    setAvailableSeeds(response.genres)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                console.log(response)\n                // if (response) {\n                //     setAvailableSeeds(response.genres)\n                // } \n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            return//getCategory(\"acoustic\"\n        }\n    }, [token])\n\n    let genreList = availableSeeds.map((genre) => {\n        return (<p>{genre}</p>)\n    })\n\n    return (\n        <div>\n            {!token && <LoginButton saveToken={saveToken} />}\n            {/*<DisplaySong song={currentSong} /> // Here */} \n            {currentUser && <p>Hello {currentUser}!</p>}\n            {currentSong && <p>Playing: {currentSong}</p>}\n            {token && <button onClick={getAvailableGenreSeeds}>Refresh</button>}\n\n            {genreList}\n        </div>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}