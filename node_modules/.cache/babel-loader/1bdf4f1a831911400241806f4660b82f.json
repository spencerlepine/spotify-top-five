{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/LoginButton.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport parseCallBack from \"./parseCallback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n\nfunction LoginButton(props) {\n  _s();\n\n  const [promptLogin, setPromptLogin] = useState(false);\n  useEffect(() => {\n    const validToken = parseCallBack(window.location.href);\n\n    if (validToken) {\n      props.saveToken(validToken);\n      window.location.hash = ''; // App will rerender with just .location\n    } else {\n      setPromptLogin(true);\n    }\n  }, []);\n\n  function connectSpotify() {\n    // Redirect to server link\n    //window.location = BACKTRACK_LINK; // process.env.REACT_APP_BACKTRACK_LINK\n    // Redirect to Spotify\n    // var stateKey = 'spotify_auth_state';\n    // var state = generateRandomString(16);\n    //localStorage.setItem(stateKey, state);\n    // https://developer.spotify.com/documentation/general/guides/scopes/\n    var scope = 'user-read-private user-read-email user-read-playback-state';\n    var url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=token';\n    url += '&client_id=' + encodeURIComponent(CLIENT_ID);\n    url += '&scope=' + encodeURIComponent(scope);\n    url += '&redirect_uri=' + encodeURIComponent(SERVER_URL + '/callback'); //url += '&state=' + encodeURIComponent(state);\n\n    window.location = url;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accountStatus\",\n    children: promptLogin && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectSpotify,\n      children: \"Connect Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginButton, \"IAFNs5tPZraroC2DHKL0avEJag8=\");\n\n_c = LoginButton;\nexport default LoginButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginButton\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/LoginButton.js"],"names":["React","useState","useEffect","parseCallBack","SERVER_URL","process","env","REACT_APP_SERVER_URL","CLIENT_ID","REACT_APP_CLIENT_ID","LoginButton","props","promptLogin","setPromptLogin","validToken","window","location","href","saveToken","hash","connectSpotify","scope","url","encodeURIComponent"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AACA,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,mBAA9B;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,UAAU,GAAGX,aAAa,CAACY,MAAM,CAACC,QAAP,CAAgBC,IAAjB,CAAhC;;AAEA,QAAIH,UAAJ,EAAgB;AACZH,MAAAA,KAAK,CAACO,SAAN,CAAgBJ,UAAhB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBG,IAAhB,GAAuB,EAAvB,CAFY,CAEc;AAC7B,KAHD,MAGO;AACHN,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ,GATQ,EASN,EATM,CAAT;;AAWA,WAASO,cAAT,GAA0B;AACtB;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,QAAIC,KAAK,GAAG,4DAAZ;AAEA,QAAIC,GAAG,GAAG,wCAAV;AACAA,IAAAA,GAAG,IAAI,sBAAP;AACAA,IAAAA,GAAG,IAAI,gBAAgBC,kBAAkB,CAACf,SAAD,CAAzC;AACAc,IAAAA,GAAG,IAAI,YAAYC,kBAAkB,CAACF,KAAD,CAArC;AACAC,IAAAA,GAAG,IAAI,mBAAmBC,kBAAkB,CAACnB,UAAU,GAAG,WAAd,CAA5C,CAhBsB,CAiBtB;;AAEAW,IAAAA,MAAM,CAACC,QAAP,GAAkBM,GAAlB;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cACKV,WAAW,iBAAI;AAAQ,MAAA,OAAO,EAAEQ,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAzCQV,W;;KAAAA,W;AA2CT,eAAeA,WAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport parseCallBack from \"./parseCallback\"\n\nconst SERVER_URL = process.env.REACT_APP_SERVER_URL;\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n\nfunction LoginButton(props) {\n    const [promptLogin, setPromptLogin] = useState(false);\n\n    useEffect(() => {\n        const validToken = parseCallBack(window.location.href);\n\n        if (validToken) {\n            props.saveToken(validToken)\n            window.location.hash = '' // App will rerender with just .location\n        } else {\n            setPromptLogin(true);\n        }\n    }, [])\n\n    function connectSpotify() {\n        // Redirect to server link\n        //window.location = BACKTRACK_LINK; // process.env.REACT_APP_BACKTRACK_LINK\n\n        // Redirect to Spotify\n        // var stateKey = 'spotify_auth_state';\n        // var state = generateRandomString(16);\n        //localStorage.setItem(stateKey, state);\n\n        // https://developer.spotify.com/documentation/general/guides/scopes/\n        var scope = 'user-read-private user-read-email user-read-playback-state';\n\n        var url = 'https://accounts.spotify.com/authorize';\n        url += '?response_type=token';\n        url += '&client_id=' + encodeURIComponent(CLIENT_ID);\n        url += '&scope=' + encodeURIComponent(scope);\n        url += '&redirect_uri=' + encodeURIComponent(SERVER_URL + '/callback');\n        //url += '&state=' + encodeURIComponent(state);\n\n        window.location = url;\n    }\n\n    return (\n        <div className=\"accountStatus\">\n            {promptLogin && <button onClick={connectSpotify}>Connect Account</button>}\n        </div>\n    )\n}\n\nexport default LoginButton"]},"metadata":{},"sourceType":"module"}