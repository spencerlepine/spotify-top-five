{"ast":null,"code":"import _objectSpread from\"/Users/notspencer/Downloads/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/notspencer/Downloads/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/notspencer/Downloads/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import SpotifyWebApi from\"spotify-web-api-js\";import LoginButton from\"./LoginButton\";import DisplayData from\"./DisplayData\";import UserPlaylist from\"./UserPlaylist\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var spotifyWebApi=new SpotifyWebApi();/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/function SpotifyData(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),token=_useState2[0],setToken=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),currentUser=_useState4[0],setCurrentUser=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),availableCategories=_useState6[0],setAvailableCategories=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),selectedCategory=_useState8[0],setSelectedCategory=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),categoryPlaylists=_useState10[0],setCategoryPlaylists=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),featuredArtists=_useState12[0],setfeaturedArtists=_useState12[1];var _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),fetchingArtists=_useState14[0],setFetchingArtists=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),checkedArtists=_useState16[0],setCheckedArtists=_useState16[1];var _useState17=useState(),_useState18=_slicedToArray(_useState17,2),finalPlaylist=_useState18[0],setFinalPlaylist=_useState18[1];function getMe(){spotifyWebApi.getMe().then(function(response){if(response){setCurrentUser(response.display_name);}});}function getCategories(){spotifyWebApi.getCategories().then(function(response){if(response){setAvailableCategories(response.categories.items);}});}function getCategory(id){spotifyWebApi.getCategory(id).then(function(response){setSelectedCategory(response.name);getCategoryPlaylists(response.id);});}function getCategoryPlaylists(id){spotifyWebApi.getCategoryPlaylists(id).then(function(response){setCategoryPlaylists(response.playlists.items);});}function getArtistImage(id,index){spotifyWebApi.getArtist(id).then(function(response){console.log(\"Running the promise\");setfeaturedArtists(function(prevArray){var updatedList=_toConsumableArray(prevArray);var obj=_objectSpread({},updatedList[index]);obj.profile=response.images[0].url;updatedList[index]=obj;return updatedList;});});}function getPlaylistTracks(id){var lim=5;spotifyWebApi.getPlaylistTracks(id,{limit:lim})// Only get 5 songs\n.then(function(response){var startingTracks=response.items;var _loop=function _loop(i){var thisArtist=startingTracks[i].track.artists[0];setfeaturedArtists(function(prevArray){// Skip if this artist already was saved\nfor(var _i=0,l=prevArray.length;_i<l;_i++){if(prevArray[_i].name===thisArtist.name){return prevArray;}}// Make a boolean array of the same length\nsetCheckedArtists(function(prevArray){return[].concat(_toConsumableArray(prevArray),[false]);});var updatedList=[].concat(_toConsumableArray(prevArray),[{name:thisArtist.name,profile:'',id:thisArtist.id}]);return updatedList;});};for(var i=0;i<lim;i++){_loop(i);}setFetchingArtists(false);});}// Abstract the image fetching interations\nfunction fetchProfiles(){if(featuredArtists.length>0){for(var i=0,l=featuredArtists.length;i<l;i++){getArtistImage(featuredArtists[i].id,i);}setFetchingArtists(true);}}function saveToken(token){spotifyWebApi.setAccessToken(token);setToken(token);}function clickCategoryCard(event){getCategory(event.target.innerText);}function clickArtist(index){setCheckedArtists(function(prevArray){var newArray=_toConsumableArray(prevArray);newArray[index]=!prevArray[index];return newArray;});}function submitSelectedArtist(){// Iterate through and select CHECKED artists\nvar finalList=checkedArtists.map(function(artist,index){if(artist){return featuredArtists[index].name;}}).filter(function(artist){return artist;});if(finalList.length){alert(\"You chose: \".concat(finalList));// Reset the list\nsetCheckedArtists([]);setfeaturedArtists([]);setAvailableCategories([]);setFinalPlaylist('Missing link');}else{alert('Please select your favorite artists..');}}useEffect(function(){if(categoryPlaylists.length>0){for(var i=0,l=categoryPlaylists.length;i<l;i++){getPlaylistTracks(categoryPlaylists[i].id);}return;}},[categoryPlaylists]);useEffect(function(){if(!fetchingArtists){fetchProfiles();return;}},[featuredArtists]);useEffect(function(){if(token){getMe();getCategories();return;}},[token]);var data={currentUser:currentUser,availableCategories:availableCategories,selectedCategory:selectedCategory,categoryPlaylists:categoryPlaylists,featuredArtists:featuredArtists,checkedArtists:checkedArtists};return/*#__PURE__*/_jsxs(_Fragment,{children:[!token&&/*#__PURE__*/_jsx(LoginButton,{saveToken:saveToken}),token&&/*#__PURE__*/_jsx(DisplayData,_objectSpread({clickArtist:clickArtist,submitSelectedArtist:submitSelectedArtist,clickCategoryCard:clickCategoryCard},data)),finalPlaylist&&/*#__PURE__*/_jsx(UserPlaylist,{finalPlaylist:finalPlaylist})]});}export default SpotifyData;","map":{"version":3,"sources":["/Users/notspencer/Downloads/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","DisplayData","UserPlaylist","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","fetchingArtists","setFetchingArtists","checkedArtists","setCheckedArtists","finalPlaylist","setFinalPlaylist","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getArtistImage","index","getArtist","console","log","prevArray","updatedList","obj","profile","images","url","getPlaylistTracks","lim","limit","startingTracks","i","thisArtist","track","artists","l","length","fetchProfiles","saveToken","setAccessToken","clickCategoryCard","event","target","innerText","clickArtist","newArray","submitSelectedArtist","finalList","map","artist","filter","alert","data"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\nimport DisplayData from \"./DisplayData\"\nimport UserPlaylist from \"./UserPlaylist\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyData() {\n    const [token, setToken] = useState(false) \n    const [currentUser, setCurrentUser] = useState()\n    const [availableCategories, setAvailableCategories] = useState([])\n    const [selectedCategory, setSelectedCategory] = useState(\"\")\n    const [categoryPlaylists, setCategoryPlaylists] = useState([])\n    const [featuredArtists, setfeaturedArtists] = useState([])\n    const [fetchingArtists, setFetchingArtists] = useState(true)\n    const [checkedArtists, setCheckedArtists] = useState([])\n    const [finalPlaylist, setFinalPlaylist] = useState()\n    \n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    function getArtistImage(id, index) {\n        spotifyWebApi.getArtist(id)\n            .then((response) => {\n                console.log(\"Running the promise\")\n                setfeaturedArtists((prevArray) => {\n                    let updatedList = [...prevArray]\n                    let obj = {...updatedList[index]}\n                    obj.profile = response.images[0].url;\n                    updatedList[index] = obj\n\n                    return updatedList\n                })\n        });\n    }\n\n    function getPlaylistTracks(id) {\n        const lim = 5;\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0];\n\n                    setfeaturedArtists((prevArray) => {\n                        // Skip if this artist already was saved\n                        for (let i = 0, l = prevArray.length; i < l; i++) {\n                            if (prevArray[i].name === thisArtist.name) {\n                                return prevArray\n                            }\n                        }\n                       \n                        // Make a boolean array of the same length\n                        setCheckedArtists((prevArray) => [...prevArray, false])\n                        let updatedList = [...prevArray, {name: thisArtist.name, profile: '', id: thisArtist.id}]\n                        return updatedList\n                    })\n                }\n                setFetchingArtists(false)\n        });\n    }\n    \n    // Abstract the image fetching interations\n    function fetchProfiles() {\n        if (featuredArtists.length > 0) {\n            for (let i = 0, l = featuredArtists.length; i < l; i++) {\n                getArtistImage(featuredArtists[i].id, i)\n            }\n            setFetchingArtists(true)\n        }\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCategoryCard(event) {\n        getCategory(event.target.innerText)\n    }\n\n    function clickArtist(index) {\n        setCheckedArtists((prevArray) => {\n            let newArray = [...prevArray]\n            newArray[index] = !prevArray[index]\n            return newArray\n        })\n    }\n\n    function submitSelectedArtist() {\n        // Iterate through and select CHECKED artists\n        const finalList = checkedArtists.map((artist, index) => {\n            if (artist) {\n                return featuredArtists[index].name\n            }\n        }).filter(artist => artist);\n\n        if (finalList.length) {\n            alert(`You chose: ${finalList}`)\n            // Reset the list\n            setCheckedArtists([])\n            setfeaturedArtists([])\n            setAvailableCategories([])\n            setFinalPlaylist('Missing link')\n        } else {\n            alert('Please select your favorite artists..')\n        }\n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (!fetchingArtists) {\n            fetchProfiles();\n            return\n        }\n    }, [featuredArtists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    const data = {\n        currentUser,\n        availableCategories,\n        selectedCategory,\n        categoryPlaylists,\n        featuredArtists,\n        checkedArtists\n    }\n\n    return (\n        <>\n            {!token && <LoginButton saveToken={saveToken} />}\n            \n            {token &&\n            <DisplayData \n                clickArtist={clickArtist}\n                submitSelectedArtist={submitSelectedArtist}\n                clickCategoryCard={clickCategoryCard}\n                {...data}\n            />}\n\n            {finalPlaylist && <UserPlaylist finalPlaylist={finalPlaylist} />}\n        </>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}