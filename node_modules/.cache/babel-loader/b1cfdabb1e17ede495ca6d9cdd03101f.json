{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport DisplayData from \"./DisplayData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyData() {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [currentUser, setCurrentUser] = useState();\n  const [availableCategories, setAvailableCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [categoryPlaylists, setCategoryPlaylists] = useState([]);\n  const [featuredArtists, setfeaturedArtists] = useState([]);\n  const [fetchingArtists, setFetchingArtists] = useState(true);\n  const [checkedArtists, setCheckedArtists] = useState([]);\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getCategories().then(response => {\n      if (response) {\n        setAvailableCategories(response.categories.items);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      setSelectedCategory(response.name);\n      getCategoryPlaylists(response.id);\n    });\n  }\n\n  function getCategoryPlaylists(id) {\n    spotifyWebApi.getCategoryPlaylists(id).then(response => {\n      setCategoryPlaylists(response.playlists.items);\n    });\n  }\n\n  function getArtistImage(id) {\n    spotifyWebApi.getArtist(id).then(response => {\n      console.log(response); //.images[0]\n\n      setfeaturedArtists(prevArray => {\n        const updatedList = [...prevArray];\n        updatedList[prevArray.length - 1].profile = response.images[0];\n        return updatedList;\n      });\n    });\n  }\n\n  function getPlaylistTracks(id) {\n    const lim = 1; // HERE, SET TO 5\n\n    spotifyWebApi.getPlaylistTracks(id, {\n      limit: lim\n    }) // Only get 5 songs\n    .then(response => {\n      let startingTracks = response.items;\n\n      for (let i = 0; i < lim; i++) {\n        let thisArtist = startingTracks[i].track.artists[0];\n        setfeaturedArtists(prevArray => {\n          if (prevArray.includes(thisArtist)) {\n            return prevArray;\n          } else {\n            // Make a boolean array of the same length\n            setCheckedArtists(prevArray => [...prevArray, false]);\n            let updatedList = [...prevArray, {\n              name: thisArtist.name,\n              profile: '',\n              id: thisArtist.id\n            }];\n            return updatedList;\n          }\n        });\n      }\n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  function clickCategoryCard(event) {\n    getCategory(event.target.innerText);\n  }\n\n  function clickArtist(index) {\n    setCheckedArtists(prevArray => {\n      let newArray = [...prevArray];\n      newArray[index] = !prevArray[index];\n      return newArray;\n    });\n  }\n\n  function submitSelectedArtist() {\n    // Iterate through and select CHECKED artists\n    const finalList = checkedArtists.map((artist, index) => {\n      if (artist) {\n        return featuredArtists[index];\n      }\n    }).filter(artist => artist);\n\n    if (finalList.length) {\n      alert(`You chose: ${finalList}`); // Reset the list\n\n      setCheckedArtists([]);\n      setfeaturedArtists([]);\n      setAvailableCategories([]);\n    } else {\n      alert('Please select your favorite artists..');\n    }\n  }\n\n  useEffect(() => {\n    if (categoryPlaylists.length > 0) {\n      for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n        getPlaylistTracks(categoryPlaylists[i].id);\n      }\n\n      setFetchingArtists(false);\n      return;\n    }\n  }, [categoryPlaylists]);\n  useEffect(() => {\n    if (fetchingArtists === false) {\n      for (let i = 0, l = featuredArtists.length; i < l; i++) {\n        getArtistImage(featuredArtists[i].id);\n      }\n\n      return;\n    }\n  }, [fetchingArtists]);\n  useEffect(() => {\n    if (token) {\n      getMe();\n      getCategories();\n      return;\n    }\n  }, [token]);\n  const data = {\n    currentUser,\n    availableCategories,\n    selectedCategory,\n    categoryPlaylists,\n    featuredArtists,\n    checkedArtists\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 24\n    }, this), token && /*#__PURE__*/_jsxDEV(DisplayData, {\n      clickArtist: clickArtist,\n      submitSelectedArtist: submitSelectedArtist,\n      clickCategoryCard: clickCategoryCard,\n      ...data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SpotifyData, \"MZG8wElfzZ/tf1U5uodD8wL8PUU=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","DisplayData","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","fetchingArtists","setFetchingArtists","checkedArtists","setCheckedArtists","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getArtistImage","getArtist","console","log","prevArray","updatedList","length","profile","images","getPlaylistTracks","lim","limit","startingTracks","i","thisArtist","track","artists","includes","saveToken","setAccessToken","clickCategoryCard","event","target","innerText","clickArtist","index","newArray","submitSelectedArtist","finalList","map","artist","filter","alert","l","data"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\nimport DisplayData from \"./DisplayData\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyData() {\n    const [token, setToken] = useState(false) \n    const [currentUser, setCurrentUser] = useState()\n    const [availableCategories, setAvailableCategories] = useState([])\n    const [selectedCategory, setSelectedCategory] = useState(\"\")\n    const [categoryPlaylists, setCategoryPlaylists] = useState([])\n    const [featuredArtists, setfeaturedArtists] = useState([])\n    const [fetchingArtists, setFetchingArtists] = useState(true)\n    const [checkedArtists, setCheckedArtists] = useState([])\n    \n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    function getArtistImage(id) {\n        spotifyWebApi.getArtist(id)\n            .then((response) => {\n                console.log(response) //.images[0]\n                setfeaturedArtists((prevArray) => {\n                    const updatedList = [...prevArray]\n                    updatedList[prevArray.length-1].profile = response.images[0]\n\n                    return updatedList\n                })\n        });\n    }\n\n    function getPlaylistTracks(id) {\n        const lim = 1; // HERE, SET TO 5\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0];\n\n                    setfeaturedArtists((prevArray) => {\n                        if (prevArray.includes(thisArtist)) {\n                            return prevArray\n                        } else {\n                            // Make a boolean array of the same length\n                            setCheckedArtists((prevArray) => [...prevArray, false])\n                            let updatedList = [...prevArray, {name: thisArtist.name, profile: '', id: thisArtist.id}]\n                            return updatedList\n                        }\n                    })\n                }\n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCategoryCard(event) {\n        getCategory(event.target.innerText)\n    }\n\n    function clickArtist(index) {\n        setCheckedArtists((prevArray) => {\n            let newArray = [...prevArray]\n            newArray[index] = !prevArray[index]\n            return newArray\n        })\n    }\n\n    function submitSelectedArtist() {\n        // Iterate through and select CHECKED artists\n        const finalList = checkedArtists.map((artist, index) => {\n            if (artist) {\n                return featuredArtists[index]\n            }\n        }).filter(artist => artist);\n\n        if (finalList.length) {\n            alert(`You chose: ${finalList}`)\n            // Reset the list\n            setCheckedArtists([])\n            setfeaturedArtists([])\n            setAvailableCategories([])\n        } else {\n            alert('Please select your favorite artists..')\n        }\n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            setFetchingArtists(false)\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (fetchingArtists === false) {\n            for (let i = 0, l = featuredArtists.length; i < l; i++) {\n                getArtistImage(featuredArtists[i].id)\n            }\n            return\n        }\n    }, [fetchingArtists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    const data = {\n        currentUser,\n        availableCategories,\n        selectedCategory,\n        categoryPlaylists,\n        featuredArtists,\n        checkedArtists\n    }\n\n    return (\n        <>\n            {!token && <LoginButton saveToken={saveToken} />}\n            \n            {token &&\n            <DisplayData \n                clickArtist={clickArtist}\n                submitSelectedArtist={submitSelectedArtist}\n                clickCategoryCard={clickCategoryCard}\n                {...data}\n            />}\n        </>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}