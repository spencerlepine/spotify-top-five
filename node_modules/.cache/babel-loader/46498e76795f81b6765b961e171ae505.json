{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Downloads/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport DisplayData from \"./DisplayData\";\nimport UserPlaylist from \"./UserPlaylist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyData() {\n  _s();\n\n  const [token, setToken] = useState(false);\n  const [currentUser, setCurrentUser] = useState();\n  const [availableCategories, setAvailableCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [categoryPlaylists, setCategoryPlaylists] = useState([]);\n  const [featuredArtists, setfeaturedArtists] = useState([]);\n  const [fetchingArtists, setFetchingArtists] = useState(true);\n  const [checkedArtists, setCheckedArtists] = useState([]);\n  const [finalPlaylist, setFinalPlaylist] = useState();\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getCategories().then(response => {\n      if (response) {\n        setAvailableCategories(response.categories.items);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      setSelectedCategory(response.name);\n      getCategoryPlaylists(response.id);\n    });\n  }\n\n  function getCategoryPlaylists(id) {\n    spotifyWebApi.getCategoryPlaylists(id).then(response => {\n      setCategoryPlaylists(response.playlists.items);\n    });\n  }\n\n  function getArtistImage(id, index) {\n    spotifyWebApi.getArtist(id).then(response => {\n      console.log(\"Running the promise\");\n      setfeaturedArtists(prevArray => {\n        let updatedList = [...prevArray];\n        let obj = { ...updatedList[index]\n        };\n        obj.profile = response.images[0].url;\n        updatedList[index] = obj;\n        return updatedList;\n      });\n    });\n  }\n\n  function getPlaylistTracks(id) {\n    const lim = 5;\n    spotifyWebApi.getPlaylistTracks(id, {\n      limit: lim\n    }) // Only get 5 songs\n    .then(response => {\n      let startingTracks = response.items;\n\n      for (let i = 0; i < lim; i++) {\n        let thisArtist = startingTracks[i].track.artists[0];\n        setfeaturedArtists(prevArray => {\n          // Skip if this artist already was saved\n          for (let i = 0, l = prevArray.length; i < l; i++) {\n            if (prevArray[i].name === thisArtist.name) {\n              return prevArray;\n            }\n          } // Make a boolean array of the same length\n\n\n          setCheckedArtists(prevArray => [...prevArray, false]);\n          let updatedList = [...prevArray, {\n            name: thisArtist.name,\n            profile: '',\n            id: thisArtist.id\n          }];\n          return updatedList;\n        });\n      }\n\n      setFetchingArtists(false);\n    });\n  } // Abstract the image fetching interations\n\n\n  function fetchProfiles() {\n    if (featuredArtists.length > 0) {\n      for (let i = 0, l = featuredArtists.length; i < l; i++) {\n        getArtistImage(featuredArtists[i].id, i);\n      }\n\n      setFetchingArtists(true);\n    }\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  function clickCategoryCard(id) {\n    getCategory(id);\n  }\n\n  function clickArtist(index) {\n    setCheckedArtists(prevArray => {\n      let newArray = [...prevArray];\n      newArray[index] = !prevArray[index];\n      return newArray;\n    });\n  }\n\n  function submitSelectedArtist() {\n    // Iterate through and select CHECKED artists\n    const finalList = checkedArtists.map((artist, index) => {\n      if (artist) {\n        return featuredArtists[index].name;\n      }\n    }).filter(artist => artist);\n\n    if (finalList.length) {\n      alert(`You chose: ${finalList}`); // Reset the list\n\n      setCheckedArtists([]);\n      setfeaturedArtists([]);\n      setAvailableCategories([]);\n      setFinalPlaylist('Missing link');\n    } else {\n      alert('Please select your favorite artists..');\n    }\n  }\n\n  useEffect(() => {\n    if (categoryPlaylists.length > 0) {\n      for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n        getPlaylistTracks(categoryPlaylists[i].id);\n      }\n\n      return;\n    }\n  }, [categoryPlaylists]);\n  useEffect(() => {\n    if (!fetchingArtists) {\n      fetchProfiles();\n      return;\n    }\n  }, [featuredArtists]);\n  useEffect(() => {\n    if (token) {\n      getMe();\n      getCategories();\n      return;\n    }\n  }, [token]);\n  const data = {\n    currentUser,\n    availableCategories,\n    selectedCategory,\n    categoryPlaylists,\n    featuredArtists,\n    checkedArtists\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 24\n    }, this), token && /*#__PURE__*/_jsxDEV(DisplayData, {\n      clickArtist: clickArtist,\n      submitSelectedArtist: submitSelectedArtist,\n      clickCategoryCard: clickCategoryCard,\n      ...data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), finalPlaylist && /*#__PURE__*/_jsxDEV(UserPlaylist, {\n      finalPlaylist: finalPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SpotifyData, \"lT0u7bWa8x7hX/CakUW3MiFqqek=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Downloads/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","DisplayData","UserPlaylist","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","fetchingArtists","setFetchingArtists","checkedArtists","setCheckedArtists","finalPlaylist","setFinalPlaylist","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getArtistImage","index","getArtist","console","log","prevArray","updatedList","obj","profile","images","url","getPlaylistTracks","lim","limit","startingTracks","i","thisArtist","track","artists","l","length","fetchProfiles","saveToken","setAccessToken","clickCategoryCard","clickArtist","newArray","submitSelectedArtist","finalList","map","artist","filter","alert","data"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\nimport DisplayData from \"./DisplayData\"\nimport UserPlaylist from \"./UserPlaylist\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyData() {\n    const [token, setToken] = useState(false) \n    const [currentUser, setCurrentUser] = useState()\n    const [availableCategories, setAvailableCategories] = useState([])\n    const [selectedCategory, setSelectedCategory] = useState(\"\")\n    const [categoryPlaylists, setCategoryPlaylists] = useState([])\n    const [featuredArtists, setfeaturedArtists] = useState([])\n    const [fetchingArtists, setFetchingArtists] = useState(true)\n    const [checkedArtists, setCheckedArtists] = useState([])\n    const [finalPlaylist, setFinalPlaylist] = useState()\n    \n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    function getArtistImage(id, index) {\n        spotifyWebApi.getArtist(id)\n            .then((response) => {\n                console.log(\"Running the promise\")\n                setfeaturedArtists((prevArray) => {\n                    let updatedList = [...prevArray]\n                    let obj = {...updatedList[index]}\n                    obj.profile = response.images[0].url;\n                    updatedList[index] = obj\n\n                    return updatedList\n                })\n        });\n    }\n\n    function getPlaylistTracks(id) {\n        const lim = 5;\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0];\n\n                    setfeaturedArtists((prevArray) => {\n                        // Skip if this artist already was saved\n                        for (let i = 0, l = prevArray.length; i < l; i++) {\n                            if (prevArray[i].name === thisArtist.name) {\n                                return prevArray\n                            }\n                        }\n                       \n                        // Make a boolean array of the same length\n                        setCheckedArtists((prevArray) => [...prevArray, false])\n                        let updatedList = [...prevArray, {name: thisArtist.name, profile: '', id: thisArtist.id}]\n                        return updatedList\n                    })\n                }\n                setFetchingArtists(false)\n        });\n    }\n    \n    // Abstract the image fetching interations\n    function fetchProfiles() {\n        if (featuredArtists.length > 0) {\n            for (let i = 0, l = featuredArtists.length; i < l; i++) {\n                getArtistImage(featuredArtists[i].id, i)\n            }\n            setFetchingArtists(true)\n        }\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCategoryCard(id) {\n        getCategory(id)\n    }\n\n    function clickArtist(index) {\n        setCheckedArtists((prevArray) => {\n            let newArray = [...prevArray]\n            newArray[index] = !prevArray[index]\n            return newArray\n        })\n    }\n\n    function submitSelectedArtist() {\n        // Iterate through and select CHECKED artists\n        const finalList = checkedArtists.map((artist, index) => {\n            if (artist) {\n                return featuredArtists[index].name\n            }\n        }).filter(artist => artist);\n\n        if (finalList.length) {\n            alert(`You chose: ${finalList}`)\n            // Reset the list\n            setCheckedArtists([])\n            setfeaturedArtists([])\n            setAvailableCategories([])\n            setFinalPlaylist('Missing link')\n        } else {\n            alert('Please select your favorite artists..')\n        }\n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (!fetchingArtists) {\n            fetchProfiles();\n            return\n        }\n    }, [featuredArtists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    const data = {\n        currentUser,\n        availableCategories,\n        selectedCategory,\n        categoryPlaylists,\n        featuredArtists,\n        checkedArtists\n    }\n\n    return (\n        <>\n            {!token && <LoginButton saveToken={saveToken} />}\n            \n            {token &&\n            <DisplayData \n                clickArtist={clickArtist}\n                submitSelectedArtist={submitSelectedArtist}\n                clickCategoryCard={clickCategoryCard}\n                {...data}\n            />}\n\n            {finalPlaylist && <UserPlaylist finalPlaylist={finalPlaylist} />}\n        </>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}