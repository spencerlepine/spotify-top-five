{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n  _s();\n\n  let [token, setToken] = useState(false);\n  let [currentUser, setCurrentUser] = useState();\n  let [availableCategories, setAvailableCategories] = useState([]);\n  let [selectedCategory, setSelectedCategory] = useState(\"\");\n  let [categoryPlaylists, setCategoryPlaylists] = useState([]);\n  let [featuredArtists, setfeaturedArtists] = useState([]);\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getCategories().then(response => {\n      if (response) {\n        setAvailableCategories(response.categories.items);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      setSelectedCategory(response.name);\n      getCategoryPlaylists(response.id);\n    });\n  }\n\n  function getCategoryPlaylists(id) {\n    spotifyWebApi.getCategoryPlaylists(id).then(response => {\n      setCategoryPlaylists(response.playlists.items);\n    });\n  } // getPlaylistTracks\n\n\n  function getPlaylist(id) {\n    spotifyWebApi.getPlaylist(id, {\n      limit: 5\n    }) // Only get 5 songs\n    .then(response => {\n      console.log(response.tracks.items); // Go through the top 5 artists and add them to the list\n      // setfeaturedArtists((prevArray) => {\n      //     let updatedList = [...prevArray, response.tracks[0].artist]\n      // })\n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  function clickCard(event) {\n    getCategory(event.target.innerText);\n  }\n\n  useEffect(() => {\n    if (categoryPlaylists.length > 0) {\n      for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n        const thisId = categoryPlaylists[i].id;\n        console.log(`Accessing: ${thisId}`);\n        getPlaylist(thisId);\n      }\n\n      return;\n    }\n  }, [categoryPlaylists]);\n  useEffect(() => {\n    if (token) {\n      getMe();\n      getCategories();\n      return;\n    }\n  }, [token]);\n  let categoryList = availableCategories.map(category => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: clickCard,\n      children: category.id\n    }, category.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 24\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", currentUser, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }, this), selectedCategory ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected: \", selectedCategory]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }, this) : categoryList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyData, \"wz9fTPaZFucyUWMzf3yzC/dhAK0=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getPlaylist","limit","console","log","tracks","saveToken","setAccessToken","clickCard","event","target","innerText","length","i","l","thisId","categoryList","map","category"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n    let [token, setToken] = useState(false) \n    let [currentUser, setCurrentUser] = useState()\n    let [availableCategories, setAvailableCategories] = useState([])\n    let [selectedCategory, setSelectedCategory] = useState(\"\")\n    let [categoryPlaylists, setCategoryPlaylists] = useState([])\n    let [featuredArtists, setfeaturedArtists] = useState([])\n\n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    // getPlaylistTracks\n    function getPlaylist(id) {\n        spotifyWebApi.getPlaylist(id, {limit: 5}) // Only get 5 songs\n            .then((response) => {\n                console.log(response.tracks.items)\n                // Go through the top 5 artists and add them to the list\n                // setfeaturedArtists((prevArray) => {\n                //     let updatedList = [...prevArray, response.tracks[0].artist]\n                // })\n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCard(event) {\n        getCategory(event.target.innerText)\n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                const thisId = categoryPlaylists[i].id;\n                console.log(`Accessing: ${thisId}`)\n\n                getPlaylist(thisId)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    let categoryList = availableCategories.map((category) => {\n        return (<p key={category.id} onClick={clickCard}>{category.id}</p>)\n    })\n\n    return (\n        <div>\n            {!token && <LoginButton saveToken={saveToken} />}\n            {currentUser && <p>Hello {currentUser}!</p>}\n\n            {selectedCategory\n                ? <p>Selected: {selectedCategory}</p>\n                : categoryList\n            }\n\n        </div>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}