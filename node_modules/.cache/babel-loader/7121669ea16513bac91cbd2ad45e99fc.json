{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n        - insert similar artist into list\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n  _s();\n\n  let [token, setToken] = useState(false);\n  let [currentUser, setCurrentUser] = useState();\n  let [availableCategories, setAvailableCategories] = useState([]);\n  let [selectedCategory, setSelectedCategory] = useState(\"\");\n  let [categoryPlaylists, setCategoryPlaylists] = useState([]);\n  let [featuredArtists, setfeaturedArtists] = useState([]);\n  let [artistListCompleted, setArtistListCompleted] = useState(false);\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getCategories().then(response => {\n      if (response) {\n        setAvailableCategories(response.categories.items);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      setSelectedCategory(response.name);\n      getCategoryPlaylists(response.id);\n    });\n  }\n\n  function getCategoryPlaylists(id) {\n    spotifyWebApi.getCategoryPlaylists(id).then(response => {\n      setCategoryPlaylists(response.playlists.items);\n    });\n  }\n\n  function getPlaylistTracks(id) {\n    const lim = 10;\n    spotifyWebApi.getPlaylistTracks(id, {\n      limit: lim\n    }) // Only get 5 songs\n    .then(response => {\n      let startingTracks = response.items;\n\n      for (let i = 0; i < lim; i++) {\n        let thisArtist = startingTracks[i].track.artists[0].name;\n        setfeaturedArtists(prevArray => {\n          if (prevArray.includes(thisArtist)) {\n            return prevArray;\n          } else {\n            let updatedList = [...prevArray, thisArtist];\n            return updatedList;\n          }\n        });\n      }\n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  function clickCard(event) {\n    getCategory(event.target.innerText);\n  }\n\n  function clickArtist(event) {\n    console.log(`Artist selected: ${event.target.innerText}`);\n  }\n\n  useEffect(() => {\n    if (categoryPlaylists.length > 0) {\n      for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n        getPlaylistTracks(categoryPlaylists[i].id);\n      }\n\n      return;\n    }\n  }, [categoryPlaylists]);\n  useEffect(() => {\n    if (token) {\n      getMe();\n      getCategories();\n      return;\n    }\n  }, [token]);\n  let categoryList = availableCategories.map(category => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: clickCard,\n      children: category.id\n    }, category.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this);\n  });\n  let artistList = featuredArtists.map(artist => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: clickArtist,\n      children: artist\n    }, artist, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 24\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", currentUser, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 29\n    }, this), selectedCategory ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected: \", selectedCategory]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }, this) : categoryList, featuredArtists ? artistList : 'No artists yet']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyData, \"kAIlY2jPEWE8ZE9D04F1iSUQFRw=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","artistListCompleted","setArtistListCompleted","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getPlaylistTracks","lim","limit","startingTracks","i","thisArtist","track","artists","prevArray","includes","updatedList","saveToken","setAccessToken","clickCard","event","target","innerText","clickArtist","console","log","length","l","categoryList","map","category","artistList","artist"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n        - insert similar artist into list\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n    let [token, setToken] = useState(false) \n    let [currentUser, setCurrentUser] = useState()\n    let [availableCategories, setAvailableCategories] = useState([])\n    let [selectedCategory, setSelectedCategory] = useState(\"\")\n    let [categoryPlaylists, setCategoryPlaylists] = useState([])\n    let [featuredArtists, setfeaturedArtists] = useState([])\n    let [artistListCompleted, setArtistListCompleted] = useState(false)\n\n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    function getPlaylistTracks(id) {\n        const lim = 10;\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0].name;\n\n                    setfeaturedArtists((prevArray) => {\n                        if (prevArray.includes(thisArtist)) {\n                            return prevArray\n                        } else {\n                            let updatedList = [...prevArray, thisArtist]\n                            return updatedList\n                        }\n                    })\n                }\n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCard(event) {\n        getCategory(event.target.innerText)\n    }\n\n    function clickArtist(event) {\n        console.log(`Artist selected: ${event.target.innerText}`)\n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    let categoryList = availableCategories.map((category) => {\n        return (<p key={category.id} onClick={clickCard}>{category.id}</p>)\n    })\n\n    let artistList = featuredArtists.map((artist) => {\n        return (<p key={artist} onClick={clickArtist}>{artist}</p>)\n    })\n\n    return (\n        <div>\n            {!token && <LoginButton saveToken={saveToken} />}\n            {currentUser && <p>Hello {currentUser}!</p>}\n\n            {selectedCategory\n                ? <p>Selected: {selectedCategory}</p>\n                : categoryList\n            }\n\n            {featuredArtists\n                ? artistList\n                : 'No artists yet'\n            }\n\n        </div>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}