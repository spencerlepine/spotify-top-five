{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n        - insert similar artist into list\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n  _s();\n\n  let [token, setToken] = useState(false);\n  let [currentUser, setCurrentUser] = useState();\n  let [availableCategories, setAvailableCategories] = useState([]);\n  let [selectedCategory, setSelectedCategory] = useState(\"\");\n  let [categoryPlaylists, setCategoryPlaylists] = useState([]);\n  let [featuredArtists, setfeaturedArtists] = useState([]);\n  let [artistListCompleted, setArtistListCompleted] = useState(false);\n  let [checkedArtists, setCheckArtists] = useState([]);\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        setCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function getCategories() {\n    spotifyWebApi.getCategories().then(response => {\n      if (response) {\n        setAvailableCategories(response.categories.items);\n      }\n    });\n  }\n\n  function getCategory(id) {\n    spotifyWebApi.getCategory(id).then(response => {\n      setSelectedCategory(response.name);\n      getCategoryPlaylists(response.id);\n    });\n  }\n\n  function getCategoryPlaylists(id) {\n    spotifyWebApi.getCategoryPlaylists(id).then(response => {\n      setCategoryPlaylists(response.playlists.items);\n    });\n  }\n\n  function getPlaylistTracks(id) {\n    const lim = 10;\n    spotifyWebApi.getPlaylistTracks(id, {\n      limit: lim\n    }) // Only get 5 songs\n    .then(response => {\n      let startingTracks = response.items;\n\n      for (let i = 0; i < lim; i++) {\n        let thisArtist = startingTracks[i].track.artists[0].name;\n        setfeaturedArtists(prevArray => {\n          if (prevArray.includes(thisArtist)) {\n            return prevArray;\n          } else {\n            // Make a boolean array of the same length\n            setCheckArtists(prevArray => [...prevArray, false]);\n            let updatedList = [...prevArray, thisArtist];\n            return updatedList;\n          }\n        });\n      }\n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  function clickCard(event) {\n    getCategory(event.target.innerText);\n  }\n\n  function clickArtist(index) {\n    setCheckArtists(prevArray => {\n      let newArray = [...prevArray];\n      newArray[index] = !prevArray[index];\n      return newArray;\n    });\n  }\n\n  function submitSelectedArtist() {\n    // Iterate through and select CHECKED artists\n    const finalList = checkedArtists.map((artist, index) => {\n      if (artist) {\n        return featuredArtists[index];\n      }\n    }).filter(artist => artist);\n\n    if (finalList.length) {\n      alert(`You chose: ${finalList}`);\n    } else {\n      alert('Please select your favorite artists..');\n    }\n  }\n\n  useEffect(() => {\n    if (categoryPlaylists.length > 0) {\n      for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n        getPlaylistTracks(categoryPlaylists[i].id);\n      }\n\n      return;\n    }\n  }, [categoryPlaylists]);\n  useEffect(() => {\n    if (token) {\n      getMe();\n      getCategories();\n      return;\n    }\n  }, [token]);\n  let categoryList = availableCategories.map(category => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: clickCard,\n      children: category.id\n    }, category.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this);\n  });\n  let artistList = featuredArtists.map((artist, index) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => clickArtist(index),\n      className: checkedArtists[index] ? \"checked\" : null,\n      children: artist\n    }, artist, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 24\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", currentUser, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }, this), selectedCategory ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [selectedCategory, \" Artists:\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }, this) : categoryList, checkedArtists.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitSelectedArtist,\n      children: \"Generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 43\n    }, this), featuredArtists ? artistList : 'No artists yet']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyData, \"WEl1z6RIYjP68LmUZSmA8aockWQ=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","spotifyWebApi","SpotifyData","token","setToken","currentUser","setCurrentUser","availableCategories","setAvailableCategories","selectedCategory","setSelectedCategory","categoryPlaylists","setCategoryPlaylists","featuredArtists","setfeaturedArtists","artistListCompleted","setArtistListCompleted","checkedArtists","setCheckArtists","getMe","then","response","display_name","getCategories","categories","items","getCategory","id","name","getCategoryPlaylists","playlists","getPlaylistTracks","lim","limit","startingTracks","i","thisArtist","track","artists","prevArray","includes","updatedList","saveToken","setAccessToken","clickCard","event","target","innerText","clickArtist","index","newArray","submitSelectedArtist","finalList","map","artist","filter","length","alert","l","categoryList","category","artistList"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    Get top artists from each\n    Save to list of artist\n        - insert similar artist into list\n    Display list of artists\n*/\n\nfunction SpotifyData() {\n    let [token, setToken] = useState(false) \n    let [currentUser, setCurrentUser] = useState()\n    let [availableCategories, setAvailableCategories] = useState([])\n    let [selectedCategory, setSelectedCategory] = useState(\"\")\n    let [categoryPlaylists, setCategoryPlaylists] = useState([])\n    let [featuredArtists, setfeaturedArtists] = useState([])\n    let [artistListCompleted, setArtistListCompleted] = useState(false)\n    let [checkedArtists, setCheckArtists] = useState([])\n    \n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    setCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function getCategories() {\n        spotifyWebApi.getCategories()\n            .then((response) => {\n                if (response) {\n                    setAvailableCategories(response.categories.items)\n                } \n        });\n    }\n    \n    function getCategory(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response.name);\n                getCategoryPlaylists(response.id);\n        });\n    }\n\n    function getCategoryPlaylists(id) {\n        spotifyWebApi.getCategoryPlaylists(id)\n            .then((response) => {\n                setCategoryPlaylists(response.playlists.items);\n        });\n    }\n\n    function getPlaylistTracks(id) {\n        const lim = 10;\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0].name;\n\n                    setfeaturedArtists((prevArray) => {\n                        if (prevArray.includes(thisArtist)) {\n                            return prevArray\n                        } else {\n                            // Make a boolean array of the same length\n                            setCheckArtists((prevArray) => [...prevArray, false])\n                            let updatedList = [...prevArray, thisArtist]\n                            return updatedList\n                        }\n                    })\n                }\n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    function clickCard(event) {\n        getCategory(event.target.innerText)\n    }\n\n    function clickArtist(index) {\n        setCheckArtists((prevArray) => {\n            let newArray = [...prevArray]\n            newArray[index] = !prevArray[index]\n            return newArray\n        })\n    }\n\n    function submitSelectedArtist() {\n        // Iterate through and select CHECKED artists\n        const finalList = checkedArtists.map((artist, index) => {\n            if (artist) {\n                return featuredArtists[index]\n            }\n        }).filter(artist => artist);\n\n        if (finalList.length) {\n            alert(`You chose: ${finalList}`)\n        } else {\n            alert('Please select your favorite artists..')\n        }\n        \n    }\n\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            getCategories()\n            return\n        }\n    }, [token])\n\n    let categoryList = availableCategories.map((category) => {\n        return (<p key={category.id} onClick={clickCard}>{category.id}</p>)\n    })\n\n    let artistList = featuredArtists.map((artist, index) => {\n        return (<p key={artist} onClick={() => clickArtist(index)} className={checkedArtists[index] ? \"checked\" : null}>{artist}</p>)\n    })\n\n    return (\n        <div>\n            {!token && <LoginButton saveToken={saveToken} />}\n            {currentUser && <p>Hello {currentUser}!</p>}\n\n            {selectedCategory\n                ? <p>{selectedCategory} Artists:</p>\n                : categoryList\n            }\n\n            {checkedArtists.length > 0 && <button onClick={submitSelectedArtist}>Generate</button>}\n\n            {featuredArtists\n                ? artistList\n                : 'No artists yet'\n            }\n\n        </div>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}