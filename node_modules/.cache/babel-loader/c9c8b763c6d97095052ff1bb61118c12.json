{"ast":null,"code":"var _jsxFileName = \"/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport LoginButton from \"./LoginButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyWebApi = new SpotifyWebApi();\n\nfunction SpotifyData() {\n  _s();\n\n  let [token, setToken] = useState(false);\n  let [currentSong, setCurrentSong] = useState();\n  let [currentUser, sertCurrentUser] = useState();\n\n  function getCurrentSong() {\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\n      if (response.item) {\n        setCurrentSong(response.item.name);\n      } else {\n        setCurrentSong(false);\n      }\n    });\n  }\n\n  function getMe() {\n    spotifyWebApi.getMe().then(response => {\n      if (response) {\n        sertCurrentUser(response.display_name);\n      }\n    });\n  }\n\n  function saveToken(token) {\n    spotifyWebApi.setAccessToken(token);\n    setToken(token);\n  }\n\n  useEffect(() => {\n    if (token) {\n      getMe();\n      return;\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!token && /*#__PURE__*/_jsxDEV(LoginButton, {\n      saveToken: saveToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 24\n    }, this), currentUser && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hello \", currentUser, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 29\n    }, this), currentSong && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Playing: \", currentSong]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }, this), token && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getCurrentSong,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifyData, \"YRcAqrrEVSOmb3dBfinfxsS+W14=\");\n\n_c = SpotifyData;\nexport default SpotifyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyData\");","map":{"version":3,"sources":["/Users/notspencer/Documents/React Practice/spotify-top-five/client/src/components/SpotifyData.js"],"names":["React","useState","useEffect","SpotifyWebApi","LoginButton","spotifyWebApi","SpotifyData","token","setToken","currentSong","setCurrentSong","currentUser","sertCurrentUser","getCurrentSong","getMyCurrentPlaybackState","then","response","item","name","getMe","display_name","saveToken","setAccessToken"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,aAAa,GAAG,IAAIF,aAAJ,EAAtB;;AAEA,SAASG,WAAT,GAAuB;AAAA;;AACnB,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,KAAD,CAAhC;AACA,MAAI,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA5C;AACA,MAAI,CAACU,WAAD,EAAcC,eAAd,IAAiCX,QAAQ,EAA7C;;AAEA,WAASY,cAAT,GAA0B;AACtBR,IAAAA,aAAa,CAACS,yBAAd,GACKC,IADL,CACWC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAb,EAAmB;AACfP,QAAAA,cAAc,CAACM,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAd;AACH,OAFD,MAEO;AAAER,QAAAA,cAAc,CAAC,KAAD,CAAd;AAAuB;AACvC,KALD;AAMH;;AAED,WAASS,KAAT,GAAiB;AACbd,IAAAA,aAAa,CAACc,KAAd,GACKJ,IADL,CACWC,QAAD,IAAc;AAChB,UAAIA,QAAJ,EAAc;AACVJ,QAAAA,eAAe,CAACI,QAAQ,CAACI,YAAV,CAAf;AACH;AACR,KALD;AAMH;;AAED,WAASC,SAAT,CAAmBd,KAAnB,EAA0B;AACtBF,IAAAA,aAAa,CAACiB,cAAd,CAA6Bf,KAA7B;AACAC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;;AAEDL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,KAAJ,EAAW;AACPY,MAAAA,KAAK;AACL;AACH;AACJ,GALQ,EAKN,CAACZ,KAAD,CALM,CAAT;AAOA,sBACI;AAAA,eACK,CAACA,KAAD,iBAAU,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEc;AAAxB;AAAA;AAAA;AAAA;AAAA,YADf,EAGKV,WAAW,iBAAI;AAAA,2BAAUA,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAHpB,EAIKF,WAAW,iBAAI;AAAA,8BAAaA,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAJpB,EAKKF,KAAK,iBAAI;AAAQ,MAAA,OAAO,EAAEM,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALd;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA5CQP,W;;KAAAA,W;AA8CT,eAAeA,WAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport LoginButton from \"./LoginButton\"\n\nconst spotifyWebApi = new SpotifyWebApi();\n\nfunction SpotifyData() {\n    let [token, setToken] = useState(false) \n    let [currentSong, setCurrentSong] = useState()\n    let [currentUser, sertCurrentUser] = useState()\n\n    function getCurrentSong() {\n        spotifyWebApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                if (response.item) {\n                    setCurrentSong(response.item.name)\n                } else { setCurrentSong(false) }\n        });\n    }\n\n    function getMe() {\n        spotifyWebApi.getMe()\n            .then((response) => {\n                if (response) {\n                    sertCurrentUser(response.display_name)\n                } \n        });\n    }\n\n    function saveToken(token) {\n        spotifyWebApi.setAccessToken(token);\n        setToken(token);\n    }\n\n    useEffect(() => {\n        if (token) {\n            getMe()\n            return\n        }\n    }, [token])\n\n    return (\n        <div>\n            {!token && <LoginButton saveToken={saveToken} />}\n            {/*<DisplaySong song={currentSong} /> // Here */} \n            {currentUser && <p>Hello {currentUser}!</p>}\n            {currentSong && <p>Playing: {currentSong}</p>}\n            {token && <button onClick={getCurrentSong}>Refresh</button>}\n        </div>\n    )\n}\n\nexport default SpotifyData\n"]},"metadata":{},"sourceType":"module"}