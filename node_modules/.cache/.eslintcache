[{"/Users/notspencer/Documents/spotify-top-songs/src/index.js":"1","/Users/notspencer/Documents/spotify-top-songs/src/App.js":"2","/Users/notspencer/Documents/spotify-top-songs/src/reportWebVitals.js":"3","/Users/notspencer/Documents/spotify-top-songs/src/SpotifyContext.js":"4","/Users/notspencer/Documents/spotify-top-songs/src/components/Header.js":"5","/Users/notspencer/Documents/spotify-top-songs/src/components/Footer.js":"6","/Users/notspencer/Documents/spotify-top-songs/src/components/ErrorBoundary.js":"7","/Users/notspencer/Documents/spotify-top-songs/src/components/SpotifyDataComponent.js":"8","/Users/notspencer/Documents/spotify-top-songs/src/components/ArtistList.js":"9","/Users/notspencer/Documents/spotify-top-songs/src/components/LoginButton.js":"10","/Users/notspencer/Documents/spotify-top-songs/src/components/UserConnected.js":"11","/Users/notspencer/Documents/spotify-top-songs/src/components/UserPlaylist.js":"12","/Users/notspencer/Documents/spotify-top-songs/src/components/CategoryList.js":"13","/Users/notspencer/Documents/spotify-top-songs/src/components/UserWelcome.js":"14","/Users/notspencer/Documents/spotify-top-songs/src/components/parseCallback.js":"15"},{"size":500,"mtime":1617558201377,"results":"16","hashOfConfig":"17"},{"size":755,"mtime":1617558201374,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1617558201377,"results":"19","hashOfConfig":"17"},{"size":7557,"mtime":1617558201374,"results":"20","hashOfConfig":"17"},{"size":217,"mtime":1617558201375,"results":"21","hashOfConfig":"17"},{"size":777,"mtime":1617558201375,"results":"22","hashOfConfig":"17"},{"size":516,"mtime":1617558201375,"results":"23","hashOfConfig":"17"},{"size":1414,"mtime":1617558201375,"results":"24","hashOfConfig":"17"},{"size":1202,"mtime":1617558201375,"results":"25","hashOfConfig":"17"},{"size":1936,"mtime":1617558201375,"results":"26","hashOfConfig":"17"},{"size":665,"mtime":1617558201375,"results":"27","hashOfConfig":"17"},{"size":581,"mtime":1617558201375,"results":"28","hashOfConfig":"17"},{"size":667,"mtime":1617558201375,"results":"29","hashOfConfig":"17"},{"size":530,"mtime":1617558201375,"results":"30","hashOfConfig":"17"},{"size":315,"mtime":1617558201375,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2cbq4u",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/notspencer/Documents/spotify-top-songs/src/index.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/App.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/reportWebVitals.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/SpotifyContext.js",["65","66","67","68"],"import React, {useState, useEffect, createContext} from \"react\"\nimport SpotifyWebApi from \"spotify-web-api-js\"\nimport {Redirect, useHistory} from \"react-router-dom\"\n\nconst spotifyWebApi = new SpotifyWebApi();\nconst SpotifyContext = createContext()\n\n/*\n    --Display current username\n    --Fetch and display list of Categories\n    --Save user category choice\n    --Fetch category playlists\n    --Get top artists from each\n    --Save to list of artist\n        *insert similar artist into list\n    --Display list of artists\n*/\n\nfunction SpotifyContextProvider(props) {\n    const [token, setToken] = useState(false)\n    const [user, setUser] = useState(null)\n    const [availableCategories, setAvailableCategories] = useState([])\n    const [selectedCategory, setSelectedCategory] = useState(\"\")\n    const [featuredArtists, setFeaturedArtists] = useState([])\n    const [checkedArtists, setCheckedArtists] = useState([])\n    const [categoryPlaylists, setCategoryPlaylists] = useState([])\n    const [fetchingArtists, setFetchingArtists] = useState(true)\n    const [playlistLink, setPlaylistLink] = useState({href: '', id: null})\n    const [finalPlaylist, setFinalPlaylist] = useState([]);\n\n    const history = useHistory();\n\n    // Once we have a token, start getting spotify data\n    useEffect(() => {\n        if (token) {\n            spotifyWebApi.setAccessToken(token);\n\n            spotifyWebApi.getMe()\n                .then((response) => setUser(response))\n\n            spotifyWebApi.getCategories()\n                .then((response) => {setAvailableCategories(response.categories.items)})\n            return\n        }\n    }, [token])\n\n    // After the category is found, use the ID\n    useEffect(() => {\n        if (selectedCategory) {\n            spotifyWebApi.getCategoryPlaylists(selectedCategory.id)\n                .then((response) => setCategoryPlaylists(response.playlists.items))\n            return\n        }\n    }, [selectedCategory])\n\n    // Go through the playlists of the selected category ONCE\n    useEffect(() => {\n        if (categoryPlaylists.length > 0) {\n            for (let i = 0, l = categoryPlaylists.length; i < l; i++) {\n                getPlaylistTracks(categoryPlaylists[i].id)\n            }\n            return\n        }\n    }, [categoryPlaylists])\n\n    function getPlaylistTracks(id) {\n        const lim = 5;\n\n        spotifyWebApi.getPlaylistTracks(id, {limit: lim}) // Only get 5 songs\n            .then((response) => {\n                let startingTracks = response.items;\n\n                for (let i = 0; i < lim; i++) {\n                    let thisArtist = startingTracks[i].track.artists[0];\n\n                    setFeaturedArtists((prevArray) => {\n                        // Make a boolean array of the same length\n                        setCheckedArtists((prevArray) => [...prevArray, false])\n\n                        // Skip if this artist already was saved\n                        for (let i = 0, l = prevArray.length; i < l; i++) {\n                            if (`${prevArray[i].id}` === `${thisArtist.id}`) {\n                                return prevArray\n                            }\n                        }\n\n                        let updatedList = [...prevArray, {id: thisArtist.id}]\n                        return updatedList\n                    })\n                }\n                setFetchingArtists(false)\n        });\n    }\n\n    // Use fresh artist data to get their profile images\n    useEffect(() => {\n        if (!fetchingArtists) {\n            fetchProfiles();\n            return\n        }\n    }, [featuredArtists])\n\n    // Abstract the image fetching interations\n    function fetchProfiles() {\n        setFetchingArtists(true)\n        if (featuredArtists.length > 0) {\n            for (let i = 0, l = featuredArtists.length; i < l; i++) {\n                getArtistImage(featuredArtists[i].id, i)\n            }\n        }\n    }\n\n    // Overwrite featuredArtist array with full artist info\n    function getArtistImage(id, index) {\n        spotifyWebApi.getArtist(id)\n            .then((response) => {\n                setFeaturedArtists((prevArray) => {\n                    if (response.popularity < 10) {\n                        return prevArray\n                    }\n\n                    let updatedList = [...prevArray]\n                    updatedList[index] = response\n\n                    return updatedList\n                })\n        });\n    }\n\n    function clickCategoryCard(id) {\n        spotifyWebApi.getCategory(id)\n            .then((response) => {\n                setSelectedCategory(response)\n                history.push('/artists')\n            })\n    }\n    \n    function clickArtist(index) {\n        setCheckedArtists((prevArray) => {\n            let newArray = [...prevArray]\n            newArray[index] = !prevArray[index]\n            return newArray\n        })\n    }\n\n    function submitSelectedArtists() {\n        history.push(\"/generate\");\n        getPlaylistLink();\n    }\n\n    function getPlaylistLink() {\n        // Use final list\n        spotifyWebApi.createPlaylist(user.id, {\n            \"name\": \"Top Songs\",\n            \"description\": \"Top songs from your favorite artists. Created with a Spotify React app made by @SpencerLepine\",\n            \"public\": false\n        })\n        .then((response) => {\n            setPlaylistLink({href: `https://open.spotify.com/playlist/${response.id}`, id: response.id})\n        })\n    }\n\n    function redirectHome() {\n        setPlaylistLink({href: '', id: null})\n        setFinalPlaylist([]);\n        history.push(\"/\")\n    }\n\n    useEffect(() => {\n        if (typeof playlistLink.id === 'string') {\n            // Iterate through and select CHECKED artists\n            const finalList = checkedArtists.map((artist, index) => {\n                if (artist) {\n                    return featuredArtists[index]\n                }\n            }).filter(artist => artist);\n\n            setFinalPlaylist(finalList)\n\n            for (let i = 0, l = finalList.length; i < l; i++) {\n                spotifyWebApi.getArtistTopTracks(finalList[i].id, \"US\")\n                    .then((response) => {\n                        let tracks = response.tracks.map((track) => track.uri)\n                        if (tracks.length > 0) {\n                            spotifyWebApi.addTracksToPlaylist(playlistLink.id, tracks)\n                            .catch(reject => {\n                                console.log(finalList[i])\n                                console.log(`Artist: ${finalList[i].name} did not cooperate`)\n                            })\n                        }\n                    })\n                setTimeout(200) // Don't call the API so quickly in case they block this\n            }\n    \n            console.log(`Up to ${finalList.length*10} songs were added to your playlist`)\n            setSelectedCategory(\"\") \n            setCheckedArtists([])\n            setCategoryPlaylists([])\n            setFetchingArtists(true)\n            return\n        }\n    }, [playlistLink])\n\n    return (\n        <SpotifyContext.Provider value={{\n            user,\n            token,\n            setToken,\n            availableCategories,\n            clickCategoryCard,\n            selectedCategory,\n            clickArtist, \n            featuredArtists,\n            checkedArtists,\n            playlistLink,\n            finalPlaylist,\n            submitSelectedArtists,\n            redirectHome,\n            setPlaylistLink\n        }}>\n            {props.children}\n        </SpotifyContext.Provider>\n    )\n}\n\nexport {SpotifyContextProvider, SpotifyContext}","/Users/notspencer/Documents/spotify-top-songs/src/components/Header.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/Footer.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/ErrorBoundary.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/SpotifyDataComponent.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/ArtistList.js",["69"],"import React, {useContext} from \"react\"\nimport {SpotifyContext} from \"../SpotifyContext\"\nimport error from \"./error.png\"\n\nfunction ArtistList() {\n    const {featuredArtists, selectedCategory, clickArtist, checkedArtists} = useContext(SpotifyContext)\n\n    const artistList = featuredArtists.map((artist, index) => {\n        let profilePic = error\n        if (artist.images) {\n            if (artist.images.length > 0) {\n                profilePic = artist.images[2].url \n\n                return (\n                    <div key={index}\n                        onClick={() => clickArtist(index)}\n                        className={checkedArtists[index] ? \"checked card\" : \"card\"}>\n                        <div style={{opacity: profilePic === error ? \"0\" : \"1\"}}>   \n                            <img src={profilePic} alt=\"Artist profile\"></img>\n                        </div>\n                        <p>{artist.name}</p>\n                    </div>\n                )\n            }\n        }\n\n        });\n\n    return (\n        <div className=\"cardGrid\">\n            <p className=\"stepInstructions\">{selectedCategory.name} Artists:</p>\n            {artistList}\n        </div>\n    )\n}\n\nexport default ArtistList","/Users/notspencer/Documents/spotify-top-songs/src/components/LoginButton.js",["70","71"],"import React, {useState, useEffect, useContext} from \"react\"\nimport parseCallBack from \"./parseCallback\"\nimport UserWelcome from \"./UserWelcome\"\nimport {SpotifyContext} from \"../SpotifyContext\"\nimport {useHistory} from \"react-router-dom\"\n\nfunction LoginButton() {\n    const history = useHistory();\n\n    const {token, setToken} = useContext(SpotifyContext);\n\n    useEffect(() => {\n        const validToken = parseCallBack(window.location.href);\n\n        if (validToken) {\n            setToken(validToken)\n            // window.location.hash = '' // App will rerender with just .location\n        }\n    }, [])\n\n    function connectSpotify() {\n        //var stateKey = 'spotify_auth_state';\n\n        const client_id = '0d539539a02d47a8842d93141f6b6984'; \n        const redirect_uri = window.location + 'callback'; \n\n        //var state = generateRandomString(16);\n        //localStorage.setItem(stateKey, state);\n\n        // https://developer.spotify.com/documentation/general/guides/scopes/\n        var scope = 'user-read-private user-read-email user-read-playback-state playlist-modify-public playlist-modify-private';\n\n        var url = 'https://accounts.spotify.com/authorize';\n        url += '?response_type=token';\n        url += '&client_id=' + encodeURIComponent(client_id);\n        url += '&scope=' + encodeURIComponent(scope);\n        url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\n        //url += '&state=' + encodeURIComponent(state);\n\n        window.location = url;\n    }\n\n    return (\n        <div className=\"accountStatus\">\n            {!token\n            ? \n            (<>\n                <UserWelcome />\n                <button onClick={connectSpotify}>Connect Account</button>\n            </>)\n            :\n            (<>\n                <button onClick={() => history.push(\"/categories\")}>NEW PLAYLIST</button>\n            </>)\n            }\n        </div>\n    )\n}\n\nexport default React.memo(LoginButton)","/Users/notspencer/Documents/spotify-top-songs/src/components/UserConnected.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/UserPlaylist.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/CategoryList.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/UserWelcome.js",[],"/Users/notspencer/Documents/spotify-top-songs/src/components/parseCallback.js",[],{"ruleId":"72","severity":1,"message":"73","line":3,"column":9,"nodeType":"74","messageId":"75","endLine":3,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":101,"column":8,"nodeType":"78","endLine":101,"endColumn":25,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":172,"column":66,"nodeType":"82","messageId":"83","endLine":172,"endColumn":68},{"ruleId":"76","severity":1,"message":"84","line":202,"column":8,"nodeType":"78","endLine":202,"endColumn":22,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":60,"nodeType":"82","messageId":"83","endLine":8,"endColumn":62},{"ruleId":"72","severity":1,"message":"86","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"76","severity":1,"message":"87","line":19,"column":8,"nodeType":"78","endLine":19,"endColumn":10,"suggestions":"88"},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchProfiles' and 'fetchingArtists'. Either include them or remove the dependency array.","ArrayExpression",["89"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'checkedArtists' and 'featuredArtists'. Either include them or remove the dependency array.",["90"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'setToken'. Either include it or remove the dependency array.",["91"],{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [featuredArtists, fetchProfiles, fetchingArtists]",{"range":"98","text":"99"},"Update the dependencies array to be: [checkedArtists, featuredArtists, playlistLink]",{"range":"100","text":"101"},"Update the dependencies array to be: [setToken]",{"range":"102","text":"103"},[3553,3570],"[featuredArtists, fetchProfiles, fetchingArtists]",[6975,6989],"[checkedArtists, featuredArtists, playlistLink]",[603,605],"[setToken]"]